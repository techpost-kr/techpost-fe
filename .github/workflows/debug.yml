name: Debug Frontend Pipeline

on:
  workflow_dispatch:
    inputs:
      test_secrets_only:
        description: 'Only test secrets (no build)'
        required: false
        default: 'false'
        type: boolean

jobs:
  debug-secrets:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Environment Debug
        run: |
          echo "=== GitHub Context ==="
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref: ${{ github.ref }}"
          
      - name: üîê Secrets Availability Test
        run: |
          echo "=== Secrets Check ==="
          
          # Check DOCKERHUB_USERNAME
          if [ -z "$DOCKERHUB_USERNAME" ]; then
            echo "‚ùå DOCKERHUB_USERNAME is not set or empty"
            SECRET_ERROR=1
          else
            echo "‚úÖ DOCKERHUB_USERNAME is available"
            echo "   Length: ${#DOCKERHUB_USERNAME} characters"
            echo "   Preview: ${DOCKERHUB_USERNAME:0:3}***"
          fi
          
          # Check DOCKERHUB_TOKEN
          if [ -z "$DOCKERHUB_TOKEN" ]; then
            echo "‚ùå DOCKERHUB_TOKEN is not set or empty"
            SECRET_ERROR=1
          else
            echo "‚úÖ DOCKERHUB_TOKEN is available"
            echo "   Length: ${#DOCKERHUB_TOKEN} characters"
            echo "   Preview: ${DOCKERHUB_TOKEN:0:4}***"
          fi
          
          if [ "$SECRET_ERROR" = "1" ]; then
            echo ""
            echo "üîß Troubleshooting Steps:"
            echo "1. Check Organization Secrets: Settings > Secrets and variables > Actions"
            echo "2. Verify Repository has access to Organization secrets"
            echo "3. Or add secrets directly to Repository: Repository Settings > Secrets and variables > Actions"
            echo "4. Ensure DOCKERHUB_TOKEN is an Access Token, not a password"
            exit 1
          fi
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üê≥ Docker Hub Connection Test
        run: |
          echo "=== Docker Hub Connection Test ==="
          
          # Test connection to Docker Hub
          echo "Testing connection to Docker Hub registry..."
          if curl -s --max-time 10 https://registry-1.docker.io/v2/ > /dev/null; then
            echo "‚úÖ Docker Hub is reachable"
          else
            echo "‚ùå Cannot reach Docker Hub"
          fi
          
          echo ""
          echo "Docker version:"
          docker version --format 'Client: {{.Client.Version}}, Server: {{.Server.Version}}'

      - name: üîë Docker Login Test
        run: |
          echo "=== Docker Login Test ==="
          echo "Attempting to login to Docker Hub..."
          
          if echo "$DOCKERHUB_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin; then
            echo "‚úÖ Docker login successful!"
            
            # Test basic Docker Hub API access
            echo ""
            echo "Testing Docker Hub API access..."
            if docker pull hello-world:latest > /dev/null 2>&1; then
              echo "‚úÖ Can pull images from Docker Hub"
              docker rmi hello-world:latest > /dev/null 2>&1
            else
              echo "‚ùå Cannot pull images from Docker Hub"
            fi
            
            echo ""
            echo "Logging out..."
            docker logout
          else
            echo "‚ùå Docker login failed!"
            echo ""
            echo "üîß Possible causes:"
            echo "1. Incorrect username or token"
            echo "2. Token doesn't have required permissions"
            echo "3. Account issues (2FA, suspended, etc.)"
            exit 1
          fi
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üìÅ Project Structure Check
        run: |
          echo "=== Project Structure ==="
          echo "Current directory contents:"
          ls -la
          
          echo ""
          if [ -f "Dockerfile" ]; then
            echo "‚úÖ Dockerfile exists"
            echo "Dockerfile preview:"
            echo "--- START ---"
            head -15 Dockerfile
            echo "--- END ---"
          else
            echo "‚ùå Dockerfile not found!"
          fi
          
          echo ""
          if [ -f "package.json" ]; then
            echo "‚úÖ package.json exists"
            if command -v jq > /dev/null; then
              echo "Build scripts:"
              jq '.scripts' package.json 2>/dev/null || echo "Cannot parse package.json scripts"
            fi
          else
            echo "‚ùå package.json not found!"
          fi

  test-build:
    needs: debug-secrets
    if: ${{ !inputs.test_secrets_only }}
    uses: ./.github/workflows/build.yml
    with:
      project: techpost
      module: frontend
      profiles_active: prod
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  summary:
    needs: [debug-secrets, test-build]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: üìä Debug Summary
        run: |
          echo "=== Debug Summary ==="
          echo "Secrets Check: ${{ needs.debug-secrets.result }}"
          
          if [ "${{ needs.test-build.result }}" != "" ]; then
            echo "Build Test: ${{ needs.test-build.result }}"
          else
            echo "Build Test: Skipped (secrets only mode)"
          fi
          
          echo ""
          if [ "${{ needs.debug-secrets.result }}" = "success" ]; then
            echo "‚úÖ All debugging checks passed!"
            
            if [ "${{ needs.test-build.result }}" = "success" ]; then
              echo "‚úÖ Build test also successful!"
              echo ""
              echo "Your Docker Hub integration is working correctly."
              echo "You can now enable the main pipeline with confidence."
            elif [ "${{ needs.test-build.result }}" = "failure" ]; then
              echo "‚ùå Build test failed - check the build logs for details"
            fi
          else
            echo "‚ùå Debug checks failed - review the logs above for issues"
          fi
